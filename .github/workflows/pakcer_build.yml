name: Packer Build
env:
  host: ${{ secrets.HOST }}
  databaseUser: ${{ secrets.USERNAME }}
  databasePassword: ${{ secrets.PASSWORD }}
  databasePort: ${{ secrets.PORT }}
  databaseName: ${{ secrets.DATABASE }}

on:
  push:
    branches:
      - review9



jobs:
  build:
 
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v0.4.0
      with:
        credentials_json: '${{ secrets.GOOGLE_CREDENTIALS }}'

    - name: Zip the web application files
      run: zip -r webapp.zip ./

    - name: Create .env file
      run: |
        cat << EOF > .env
        DB_HOST: ${{ secrets.HOSTDB }}
            DB_USER: ${{ secrets.USERNAME }}
            DB_PASSWORD: ${{ secrets.PASSWORDDB }}
            DB_NAME: ${{ secrets.DATABASE }}
            DB_PORT: ${{secrets.PORT}}
        EOF

    - name: Install Packer
      run: |
        curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
        sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
        sudo apt-get update && sudo apt-get install packer

    - name: Initialize Packer
      run: packer init .
      working-directory: ./packer

    - name: Format Packer template
      run: packer fmt -check -diff .
      working-directory: ./packer
      continue-on-error: true  
      
    - name: Validate Packer template
      run: packer validate .
      working-directory: ./packer

    # If everything is validated, you can add a step to build the image
   # - name: Build Packer image
   #   run: packer build .
#      working-directory: ./packer

    - name: Get Latest Image Name
      id: get_IMG_NAME
      run: |
            IMG_NAME=$(gcloud compute images list --project devproject-414921 --filter='name:centos-stream-8-*' --sort-by=~creationTimestamp --limit=1 --format='value(name)')
            echo "::set-output name=IMG_NAME::$IMG_NAME"
            echo "IMAGE: $IMAGE"

    - name: Get  Instance Group Manager
      id: get_instancemanager
      run: |
        instancemanager=$(gcloud compute instance-groups managed list --regions ${{ secrets.REGION }} --format="value(name)" --limit 1)
        echo "::set-output name=instancemanager::$instancemanager"
        echo "instancemanager: $instancemanager"

      
    - name: Get currentkeyring
      id: get_keyRing
      run: |
        currentkeyring=$(gcloud kms keyrings list --location=${{ secrets.REGION }} --project=${{secrets.PROJECT_ID}} --format="value(name, createTime)" | sort -k2,2r | head -n1 | awk '{print $1}')
        
        echo "::set-output name=currentkeyring::$currentkeyring"
        echo "currentkeyring=$currentkeyring"


    - name: Get VM key
      id: get_vm_key
      run: |
          vmkey=$(gcloud kms keys list --location=${{ secrets.REGION }} --keyring=${{steps.get_keyRing.outputs.currentkeyring}} --project=${{ secrets.PROJECT_ID }} --filter="name:vm-machine" --format="value(name)")
          echo "::set-output name=vmkey::$vmkey"
          echo "vmkey=$vmkey"
      
      


    - name: Create Instance Template
      run: |
            gcloud compute instance-templates create instance-template-$(date +%Y%m%d%H%M%S) \
              --region=${{ secrets.REGION }} \
              --project=${{ secrets.PROJECT_ID }} \
              --machine-type=${{ secrets.MACHINETYPE }} \
              --network-interface=network-tier=PREMIUM,stack-type=IPV4_ONLY,subnet=https://www.googleapis.com/compute/v1/projects/devproject-414921/regions/us-east1/subnetworks/srimanth-webapp \
              --metadata=startup-script="#!/bin/bash
                if [ ! -f '/opt/.env' ]; then
                  touch /opt/.env
                fi
                echo 'DB_HOST=${{ secrets.HOSTIP }}' > /opt/.env
                echo 'DB_USER=${{ secrets.USERNAME }}' >> /opt/.env
                echo 'DB_NAME=${{ secrets.DATABASE }}' >> /opt/.env
                echo 'DB_PASSWORD=${{ secrets.IPPASSWORD }}' >> /opt/.env
                echo 'DB_DIALECT=mysql' >> /opt/.env
                echo 'DB_PORT=${{ secrets.PORT }}' >> /opt/.env
                chown csye6225:csye6225 /opt/.env
                systemctl restart webapp" \
              --service-account=${{ secrets.SERVICEACCOUNTEMAIL }} \
              --scopes=https://www.googleapis.com/auth/cloud-platform \
              --create-disk=auto-delete=yes,boot=yes,device-name=Disk1,image="projects/devproject-414921/global/images/${{ steps.get_IMG_NAME.outputs.IMG_NAME }}",kms-key=${{ steps.get_vm_key.outputs.vmkey }},mode=rw,size=20,type=pd-balanced \
              --tags=http-server
        
    - name : template name
      id: get_template
      run: |
        template_name=$(gcloud compute instance-templates list --project ${{ secrets.PROJECT_ID }}  --sort-by=~creationTimestamp --limit=1 --format='value(name)')
        echo "::set-output name=template_name::$template_name"
        

    - name: Configure Instance Groups
      run: |
         gcloud compute instance-groups managed rolling-action start-update ${{ steps.get_instancemanager.outputs.instancemanager }} \
            --version=template=${{ steps.get_template.outputs.template_name }} \
            --max-unavailable=3 \
            --max-surge=3 \
            --region=${{ secrets.REGION }}
      

    - name: Monitoring the instances
      run: |
        gcloud compute instance-groups managed wait-until ${{steps.get_instancemanager.outputs.instancemanager}} \
          --version-target-reached \
          --region=${{ secrets.REGION }}